{
    "swagger": "2.0",
    "info": {
        "termsOfService": "http:\/\/fortinet.com\/terms\/",
        "version": "v2",
        "contact": {
            "url": "http:\/\/modskristensen.net",
            "name": "FortiOS Web Application Team",
            "email": "fosguiqateam@fortinet.com"
        },
        "description": "REST API for configuring FortiOS objects and settings",
        "title": "FortiOS CMDB"
    },
    "host": "172.16.177.65",
    "basePath": "\/api\/v2\/cmdb",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application\/json"
    ],
    "produces": [
        "application\/json"
    ],
    "securityDefinitions": {
        "APIKeyQueryParam": {
            "type": "apiKey",
            "name": "access_token",
            "in": "query"
        }
    },
    "security": [
        {
            "APIKeyQueryParam": []
        }
    ],
    "tags": [
        {
            "name": "emailfilter\/bwl",
            "description": "Configure anti-spam black\/white list."
        },
        {
            "name": "emailfilter\/bword",
            "description": "Configure AntiSpam banned word list."
        },
        {
            "name": "emailfilter\/dnsbl",
            "description": "Configure AntiSpam DNSBL\/ORBL."
        },
        {
            "name": "emailfilter\/fortishield",
            "description": "Configure FortiGuard - AntiSpam."
        },
        {
            "name": "emailfilter\/iptrust",
            "description": "Configure AntiSpam IP trust."
        },
        {
            "name": "emailfilter\/mheader",
            "description": "Configure AntiSpam MIME header."
        },
        {
            "name": "emailfilter\/options",
            "description": "Configure AntiSpam options."
        },
        {
            "name": "emailfilter\/profile",
            "description": "Configure Email Filter profiles."
        }
    ],
    "paths": {
        "\/emailfilter\/bwl\/{id}": {
            "get": {
                "summary": "Select a specific entry from a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Anti-spam black\/white list entries.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "Entry type.   \nip:By IP address.   \nemail:By email address.",
                                                "enum": [
                                                    "ip",
                                                    "email"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Reject, mark as spam or good email.   \nreject:Reject the connection.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "reject",
                                                    "spam",
                                                    "clear"
                                                ]
                                            },
                                            "addr-type": {
                                                "type": "string",
                                                "description": "IP address type.   \nipv4:IPv4 Address type.   \nipv6:IPv6 Address type.",
                                                "enum": [
                                                    "ipv4",
                                                    "ipv6"
                                                ]
                                            },
                                            "ip4-subnet": {
                                                "type": "string",
                                                "format": "ipv4",
                                                "description": "IPv4 network address\/subnet mask bits."
                                            },
                                            "ip6-subnet": {
                                                "type": "string",
                                                "description": "IPv6 network address\/subnet mask bits."
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "email-pattern": {
                                                "type": "string",
                                                "description": "Email address pattern.",
                                                "maxLength": 127
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for this object type.\nschema: Return the CLI schema for this object type.\nrevision: Return the CMDB revision for this object type.\ntransaction-list: List all configuration transaction(s).\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema",
                            "revision"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/bwl"
                ]
            },
            "put": {
                "summary": "Update this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Anti-spam black\/white list entries.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "Entry type.   \nip:By IP address.   \nemail:By email address.",
                                                "enum": [
                                                    "ip",
                                                    "email"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Reject, mark as spam or good email.   \nreject:Reject the connection.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "reject",
                                                    "spam",
                                                    "clear"
                                                ]
                                            },
                                            "addr-type": {
                                                "type": "string",
                                                "description": "IP address type.   \nipv4:IPv4 Address type.   \nipv6:IPv6 Address type.",
                                                "enum": [
                                                    "ipv4",
                                                    "ipv6"
                                                ]
                                            },
                                            "ip4-subnet": {
                                                "type": "string",
                                                "format": "ipv4",
                                                "description": "IPv4 network address\/subnet mask bits."
                                            },
                                            "ip6-subnet": {
                                                "type": "string",
                                                "description": "IPv6 network address\/subnet mask bits."
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "email-pattern": {
                                                "type": "string",
                                                "description": "Email address pattern.",
                                                "maxLength": 127
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_move_: Move this specific resource.\nWhen *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "move"
                        ]
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.\nFor example, to move `object 1` to before `object 2`, use:\n__action=move&before=2__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.\nFor example, to move `object 1` to after `object 3`, use:\n__action=move&after=3__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/bwl"
                ]
            },
            "delete": {
                "summary": "Delete this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/bwl"
                ]
            }
        },
        "\/emailfilter\/bwl": {
            "get": {
                "summary": "Select all entries in a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Anti-spam black\/white list entries.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "Entry type.   \nip:By IP address.   \nemail:By email address.",
                                                "enum": [
                                                    "ip",
                                                    "email"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Reject, mark as spam or good email.   \nreject:Reject the connection.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "reject",
                                                    "spam",
                                                    "clear"
                                                ]
                                            },
                                            "addr-type": {
                                                "type": "string",
                                                "description": "IP address type.   \nipv4:IPv4 Address type.   \nipv6:IPv6 Address type.",
                                                "enum": [
                                                    "ipv4",
                                                    "ipv6"
                                                ]
                                            },
                                            "ip4-subnet": {
                                                "type": "string",
                                                "format": "ipv4",
                                                "description": "IPv4 network address\/subnet mask bits."
                                            },
                                            "ip6-subnet": {
                                                "type": "string",
                                                "description": "IPv6 network address\/subnet mask bits."
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "email-pattern": {
                                                "type": "string",
                                                "description": "Email address pattern.",
                                                "maxLength": 127
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Starting entry index."
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Maximum number of entries to return."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "with_contents_hash",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include a checksum of each object's contents."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering multiple key\/value pairs\nOperator     |   Description\n==     |   Case insensitive match with pattern.\n!=     |    Does not match with pattern (case insensitive).\n=@     |    Pattern found in object value (case insensitive).\n!@     |    \ufeffPattern not\ufeff found in object value (case insensitive).\n<=     |    Value must be less than or equal to \ufeffpattern\ufeff.\n<     |    Value must be less than pattern\ufeff.\n.>=    |    Value must be greater than or equal to \ufeffpattern\ufeff.\n.>     |    Value must be greater than \ufeffpattern\ufeff.\nLogical OR    |    Separate filters using commas ','\nLogical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.\nCombining AND and OR    |    You can combine AND and OR filters together to create more complex filters.\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this name."
                    },
                    {
                        "name": "pattern",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this value."
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Scope [global|vdom|both*]"
                    },
                    {
                        "name": "exclude-default-values",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Exclude properties\/objects with default value"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for entire CLI tree.\nmeta: Return meta data for a specific object, table, or the entire CLI tree.\nschema: Return schema for entire CLI tree.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/bwl"
                ]
            },
            "post": {
                "summary": "Create object(s) in this table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Anti-spam black\/white list entries.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "type": {
                                                "type": "string",
                                                "description": "Entry type.   \nip:By IP address.   \nemail:By email address.",
                                                "enum": [
                                                    "ip",
                                                    "email"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Reject, mark as spam or good email.   \nreject:Reject the connection.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "reject",
                                                    "spam",
                                                    "clear"
                                                ]
                                            },
                                            "addr-type": {
                                                "type": "string",
                                                "description": "IP address type.   \nipv4:IPv4 Address type.   \nipv6:IPv6 Address type.",
                                                "enum": [
                                                    "ipv4",
                                                    "ipv6"
                                                ]
                                            },
                                            "ip4-subnet": {
                                                "type": "string",
                                                "format": "ipv4",
                                                "description": "IPv4 network address\/subnet mask bits."
                                            },
                                            "ip6-subnet": {
                                                "type": "string",
                                                "description": "IPv6 network address\/subnet mask bits."
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "email-pattern": {
                                                "type": "string",
                                                "description": "Email address pattern.",
                                                "maxLength": 127
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_clone_: Clone this specific resource.\nWhen *action=clone* is set, the extra parameters *nkey* must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "clone"
                        ]
                    },
                    {
                        "name": "nkey",
                        "in": "query",
                        "description": " If *action=clone*, use *nkey* to specify the ID for the new resource to be created.\nFor example, to clone `address1` to `address1_clone`, use:\n__action=clone&nkey=address1_clone__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.\n",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "emailfilter\/bwl"
                ]
            }
        },
        "\/emailfilter\/bword\/{id}": {
            "get": {
                "summary": "Select a specific entry from a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter banned word.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Banned word entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "Pattern for the banned word.",
                                                "maxLength": 127
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Mark spam or good.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "spam",
                                                    "clear"
                                                ]
                                            },
                                            "where": {
                                                "type": "string",
                                                "description": "Component of the email to be scanned.   \nsubject:Banned word in email subject.   \nbody:Banned word in email body.   \nall:Banned word in both subject and body.",
                                                "enum": [
                                                    "subject",
                                                    "body",
                                                    "all"
                                                ]
                                            },
                                            "language": {
                                                "type": "string",
                                                "description": "Language for the banned word.   \nwestern:Western.   \nsimch:Simplified Chinese.   \ntrach:Traditional Chinese.   \njapanese:Japanese.   \nkorean:Korean.   \nfrench:French.   \nthai:Thai.   \nspanish:Spanish.",
                                                "enum": [
                                                    "western",
                                                    "simch",
                                                    "trach",
                                                    "japanese",
                                                    "korean",
                                                    "french",
                                                    "thai",
                                                    "spanish"
                                                ]
                                            },
                                            "score": {
                                                "type": "integer",
                                                "description": "Score value.",
                                                "maximum": 99999,
                                                "minimum": 1
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for this object type.\nschema: Return the CLI schema for this object type.\nrevision: Return the CMDB revision for this object type.\ntransaction-list: List all configuration transaction(s).\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema",
                            "revision"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/bword"
                ]
            },
            "put": {
                "summary": "Update this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter banned word.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Banned word entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "Pattern for the banned word.",
                                                "maxLength": 127
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Mark spam or good.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "spam",
                                                    "clear"
                                                ]
                                            },
                                            "where": {
                                                "type": "string",
                                                "description": "Component of the email to be scanned.   \nsubject:Banned word in email subject.   \nbody:Banned word in email body.   \nall:Banned word in both subject and body.",
                                                "enum": [
                                                    "subject",
                                                    "body",
                                                    "all"
                                                ]
                                            },
                                            "language": {
                                                "type": "string",
                                                "description": "Language for the banned word.   \nwestern:Western.   \nsimch:Simplified Chinese.   \ntrach:Traditional Chinese.   \njapanese:Japanese.   \nkorean:Korean.   \nfrench:French.   \nthai:Thai.   \nspanish:Spanish.",
                                                "enum": [
                                                    "western",
                                                    "simch",
                                                    "trach",
                                                    "japanese",
                                                    "korean",
                                                    "french",
                                                    "thai",
                                                    "spanish"
                                                ]
                                            },
                                            "score": {
                                                "type": "integer",
                                                "description": "Score value.",
                                                "maximum": 99999,
                                                "minimum": 1
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_move_: Move this specific resource.\nWhen *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "move"
                        ]
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.\nFor example, to move `object 1` to before `object 2`, use:\n__action=move&before=2__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.\nFor example, to move `object 1` to after `object 3`, use:\n__action=move&after=3__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/bword"
                ]
            },
            "delete": {
                "summary": "Delete this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/bword"
                ]
            }
        },
        "\/emailfilter\/bword": {
            "get": {
                "summary": "Select all entries in a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter banned word.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Banned word entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "Pattern for the banned word.",
                                                "maxLength": 127
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Mark spam or good.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "spam",
                                                    "clear"
                                                ]
                                            },
                                            "where": {
                                                "type": "string",
                                                "description": "Component of the email to be scanned.   \nsubject:Banned word in email subject.   \nbody:Banned word in email body.   \nall:Banned word in both subject and body.",
                                                "enum": [
                                                    "subject",
                                                    "body",
                                                    "all"
                                                ]
                                            },
                                            "language": {
                                                "type": "string",
                                                "description": "Language for the banned word.   \nwestern:Western.   \nsimch:Simplified Chinese.   \ntrach:Traditional Chinese.   \njapanese:Japanese.   \nkorean:Korean.   \nfrench:French.   \nthai:Thai.   \nspanish:Spanish.",
                                                "enum": [
                                                    "western",
                                                    "simch",
                                                    "trach",
                                                    "japanese",
                                                    "korean",
                                                    "french",
                                                    "thai",
                                                    "spanish"
                                                ]
                                            },
                                            "score": {
                                                "type": "integer",
                                                "description": "Score value.",
                                                "maximum": 99999,
                                                "minimum": 1
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Starting entry index."
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Maximum number of entries to return."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "with_contents_hash",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include a checksum of each object's contents."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering multiple key\/value pairs\nOperator     |   Description\n==     |   Case insensitive match with pattern.\n!=     |    Does not match with pattern (case insensitive).\n=@     |    Pattern found in object value (case insensitive).\n!@     |    \ufeffPattern not\ufeff found in object value (case insensitive).\n<=     |    Value must be less than or equal to \ufeffpattern\ufeff.\n<     |    Value must be less than pattern\ufeff.\n.>=    |    Value must be greater than or equal to \ufeffpattern\ufeff.\n.>     |    Value must be greater than \ufeffpattern\ufeff.\nLogical OR    |    Separate filters using commas ','\nLogical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.\nCombining AND and OR    |    You can combine AND and OR filters together to create more complex filters.\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this name."
                    },
                    {
                        "name": "pattern",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this value."
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Scope [global|vdom|both*]"
                    },
                    {
                        "name": "exclude-default-values",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Exclude properties\/objects with default value"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for entire CLI tree.\nmeta: Return meta data for a specific object, table, or the entire CLI tree.\nschema: Return schema for entire CLI tree.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/bword"
                ]
            },
            "post": {
                "summary": "Create object(s) in this table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter banned word.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Banned word entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "Pattern for the banned word.",
                                                "maxLength": 127
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Mark spam or good.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "spam",
                                                    "clear"
                                                ]
                                            },
                                            "where": {
                                                "type": "string",
                                                "description": "Component of the email to be scanned.   \nsubject:Banned word in email subject.   \nbody:Banned word in email body.   \nall:Banned word in both subject and body.",
                                                "enum": [
                                                    "subject",
                                                    "body",
                                                    "all"
                                                ]
                                            },
                                            "language": {
                                                "type": "string",
                                                "description": "Language for the banned word.   \nwestern:Western.   \nsimch:Simplified Chinese.   \ntrach:Traditional Chinese.   \njapanese:Japanese.   \nkorean:Korean.   \nfrench:French.   \nthai:Thai.   \nspanish:Spanish.",
                                                "enum": [
                                                    "western",
                                                    "simch",
                                                    "trach",
                                                    "japanese",
                                                    "korean",
                                                    "french",
                                                    "thai",
                                                    "spanish"
                                                ]
                                            },
                                            "score": {
                                                "type": "integer",
                                                "description": "Score value.",
                                                "maximum": 99999,
                                                "minimum": 1
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_clone_: Clone this specific resource.\nWhen *action=clone* is set, the extra parameters *nkey* must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "clone"
                        ]
                    },
                    {
                        "name": "nkey",
                        "in": "query",
                        "description": " If *action=clone*, use *nkey* to specify the ID for the new resource to be created.\nFor example, to clone `address1` to `address1_clone`, use:\n__action=clone&nkey=address1_clone__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.\n",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "emailfilter\/bword"
                ]
            }
        },
        "\/emailfilter\/dnsbl\/{id}": {
            "get": {
                "summary": "Select a specific entry from a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter DNSBL and ORBL server.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "DNSBL\/ORBL entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "server": {
                                                "type": "string",
                                                "description": "DNSBL or ORBL server name.",
                                                "maxLength": 127
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Reject connection or mark as spam email.   \nreject:Reject the connection.   \nspam:Mark as spam email.",
                                                "enum": [
                                                    "reject",
                                                    "spam"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for this object type.\nschema: Return the CLI schema for this object type.\nrevision: Return the CMDB revision for this object type.\ntransaction-list: List all configuration transaction(s).\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema",
                            "revision"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/dnsbl"
                ]
            },
            "put": {
                "summary": "Update this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter DNSBL and ORBL server.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "DNSBL\/ORBL entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "server": {
                                                "type": "string",
                                                "description": "DNSBL or ORBL server name.",
                                                "maxLength": 127
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Reject connection or mark as spam email.   \nreject:Reject the connection.   \nspam:Mark as spam email.",
                                                "enum": [
                                                    "reject",
                                                    "spam"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_move_: Move this specific resource.\nWhen *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "move"
                        ]
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.\nFor example, to move `object 1` to before `object 2`, use:\n__action=move&before=2__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.\nFor example, to move `object 1` to after `object 3`, use:\n__action=move&after=3__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/dnsbl"
                ]
            },
            "delete": {
                "summary": "Delete this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/dnsbl"
                ]
            }
        },
        "\/emailfilter\/dnsbl": {
            "get": {
                "summary": "Select all entries in a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter DNSBL and ORBL server.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "DNSBL\/ORBL entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "server": {
                                                "type": "string",
                                                "description": "DNSBL or ORBL server name.",
                                                "maxLength": 127
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Reject connection or mark as spam email.   \nreject:Reject the connection.   \nspam:Mark as spam email.",
                                                "enum": [
                                                    "reject",
                                                    "spam"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Starting entry index."
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Maximum number of entries to return."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "with_contents_hash",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include a checksum of each object's contents."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering multiple key\/value pairs\nOperator     |   Description\n==     |   Case insensitive match with pattern.\n!=     |    Does not match with pattern (case insensitive).\n=@     |    Pattern found in object value (case insensitive).\n!@     |    \ufeffPattern not\ufeff found in object value (case insensitive).\n<=     |    Value must be less than or equal to \ufeffpattern\ufeff.\n<     |    Value must be less than pattern\ufeff.\n.>=    |    Value must be greater than or equal to \ufeffpattern\ufeff.\n.>     |    Value must be greater than \ufeffpattern\ufeff.\nLogical OR    |    Separate filters using commas ','\nLogical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.\nCombining AND and OR    |    You can combine AND and OR filters together to create more complex filters.\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this name."
                    },
                    {
                        "name": "pattern",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this value."
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Scope [global|vdom|both*]"
                    },
                    {
                        "name": "exclude-default-values",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Exclude properties\/objects with default value"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for entire CLI tree.\nmeta: Return meta data for a specific object, table, or the entire CLI tree.\nschema: Return schema for entire CLI tree.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/dnsbl"
                ]
            },
            "post": {
                "summary": "Create object(s) in this table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter DNSBL and ORBL server.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "DNSBL\/ORBL entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "server": {
                                                "type": "string",
                                                "description": "DNSBL or ORBL server name.",
                                                "maxLength": 127
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Reject connection or mark as spam email.   \nreject:Reject the connection.   \nspam:Mark as spam email.",
                                                "enum": [
                                                    "reject",
                                                    "spam"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_clone_: Clone this specific resource.\nWhen *action=clone* is set, the extra parameters *nkey* must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "clone"
                        ]
                    },
                    {
                        "name": "nkey",
                        "in": "query",
                        "description": " If *action=clone*, use *nkey* to specify the ID for the new resource to be created.\nFor example, to clone `address1` to `address1_clone`, use:\n__action=clone&nkey=address1_clone__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.\n",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "emailfilter\/dnsbl"
                ]
            }
        },
        "\/emailfilter\/fortishield": {
            "get": {
                "summary": "Select all entries in a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "spam-submit-srv": {
                                    "type": "string",
                                    "description": "Hostname of the spam submission server.",
                                    "maxLength": 63
                                },
                                "spam-submit-force": {
                                    "type": "string",
                                    "description": "Enable\/disable force insertion of a new mime entity for the submission text.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                },
                                "spam-submit-txt2htm": {
                                    "type": "string",
                                    "description": "Enable\/disable conversion of text email to HTML email.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Starting entry index."
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Maximum number of entries to return."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "with_contents_hash",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include a checksum of each object's contents."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering multiple key\/value pairs\nOperator     |   Description\n==     |   Case insensitive match with pattern.\n!=     |    Does not match with pattern (case insensitive).\n=@     |    Pattern found in object value (case insensitive).\n!@     |    \ufeffPattern not\ufeff found in object value (case insensitive).\n<=     |    Value must be less than or equal to \ufeffpattern\ufeff.\n<     |    Value must be less than pattern\ufeff.\n.>=    |    Value must be greater than or equal to \ufeffpattern\ufeff.\n.>     |    Value must be greater than \ufeffpattern\ufeff.\nLogical OR    |    Separate filters using commas ','\nLogical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.\nCombining AND and OR    |    You can combine AND and OR filters together to create more complex filters.\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this name."
                    },
                    {
                        "name": "pattern",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this value."
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Scope [global|vdom|both*]"
                    },
                    {
                        "name": "exclude-default-values",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Exclude properties\/objects with default value"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for entire CLI tree.\nmeta: Return meta data for a specific object, table, or the entire CLI tree.\nschema: Return schema for entire CLI tree.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/fortishield"
                ]
            },
            "put": {
                "summary": "Update this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "spam-submit-srv": {
                                    "type": "string",
                                    "description": "Hostname of the spam submission server.",
                                    "maxLength": 63
                                },
                                "spam-submit-force": {
                                    "type": "string",
                                    "description": "Enable\/disable force insertion of a new mime entity for the submission text.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                },
                                "spam-submit-txt2htm": {
                                    "type": "string",
                                    "description": "Enable\/disable conversion of text email to HTML email.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_move_: Move this specific resource.\nWhen *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "move"
                        ]
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.\nFor example, to move `object 1` to before `object 2`, use:\n__action=move&before=2__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.\nFor example, to move `object 1` to after `object 3`, use:\n__action=move&after=3__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "emailfilter\/fortishield"
                ]
            }
        },
        "\/emailfilter\/iptrust\/{id}": {
            "get": {
                "summary": "Select a specific entry from a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter trusted IP addresses.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Trusted IP entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "addr-type": {
                                                "type": "string",
                                                "description": "Type of address.   \nipv4:IPv4 Address type.   \nipv6:IPv6 Address type.",
                                                "enum": [
                                                    "ipv4",
                                                    "ipv6"
                                                ]
                                            },
                                            "ip4-subnet": {
                                                "type": "string",
                                                "format": "ipv4",
                                                "description": "IPv4 network address or network address\/subnet mask bits."
                                            },
                                            "ip6-subnet": {
                                                "type": "string",
                                                "description": "IPv6 network address\/subnet mask bits."
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for this object type.\nschema: Return the CLI schema for this object type.\nrevision: Return the CMDB revision for this object type.\ntransaction-list: List all configuration transaction(s).\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema",
                            "revision"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/iptrust"
                ]
            },
            "put": {
                "summary": "Update this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter trusted IP addresses.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Trusted IP entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "addr-type": {
                                                "type": "string",
                                                "description": "Type of address.   \nipv4:IPv4 Address type.   \nipv6:IPv6 Address type.",
                                                "enum": [
                                                    "ipv4",
                                                    "ipv6"
                                                ]
                                            },
                                            "ip4-subnet": {
                                                "type": "string",
                                                "format": "ipv4",
                                                "description": "IPv4 network address or network address\/subnet mask bits."
                                            },
                                            "ip6-subnet": {
                                                "type": "string",
                                                "description": "IPv6 network address\/subnet mask bits."
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_move_: Move this specific resource.\nWhen *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "move"
                        ]
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.\nFor example, to move `object 1` to before `object 2`, use:\n__action=move&before=2__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.\nFor example, to move `object 1` to after `object 3`, use:\n__action=move&after=3__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/iptrust"
                ]
            },
            "delete": {
                "summary": "Delete this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/iptrust"
                ]
            }
        },
        "\/emailfilter\/iptrust": {
            "get": {
                "summary": "Select all entries in a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter trusted IP addresses.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Trusted IP entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "addr-type": {
                                                "type": "string",
                                                "description": "Type of address.   \nipv4:IPv4 Address type.   \nipv6:IPv6 Address type.",
                                                "enum": [
                                                    "ipv4",
                                                    "ipv6"
                                                ]
                                            },
                                            "ip4-subnet": {
                                                "type": "string",
                                                "format": "ipv4",
                                                "description": "IPv4 network address or network address\/subnet mask bits."
                                            },
                                            "ip6-subnet": {
                                                "type": "string",
                                                "description": "IPv6 network address\/subnet mask bits."
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Starting entry index."
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Maximum number of entries to return."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "with_contents_hash",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include a checksum of each object's contents."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering multiple key\/value pairs\nOperator     |   Description\n==     |   Case insensitive match with pattern.\n!=     |    Does not match with pattern (case insensitive).\n=@     |    Pattern found in object value (case insensitive).\n!@     |    \ufeffPattern not\ufeff found in object value (case insensitive).\n<=     |    Value must be less than or equal to \ufeffpattern\ufeff.\n<     |    Value must be less than pattern\ufeff.\n.>=    |    Value must be greater than or equal to \ufeffpattern\ufeff.\n.>     |    Value must be greater than \ufeffpattern\ufeff.\nLogical OR    |    Separate filters using commas ','\nLogical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.\nCombining AND and OR    |    You can combine AND and OR filters together to create more complex filters.\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this name."
                    },
                    {
                        "name": "pattern",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this value."
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Scope [global|vdom|both*]"
                    },
                    {
                        "name": "exclude-default-values",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Exclude properties\/objects with default value"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for entire CLI tree.\nmeta: Return meta data for a specific object, table, or the entire CLI tree.\nschema: Return schema for entire CLI tree.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/iptrust"
                ]
            },
            "post": {
                "summary": "Create object(s) in this table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter trusted IP addresses.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Trusted IP entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "addr-type": {
                                                "type": "string",
                                                "description": "Type of address.   \nipv4:IPv4 Address type.   \nipv6:IPv6 Address type.",
                                                "enum": [
                                                    "ipv4",
                                                    "ipv6"
                                                ]
                                            },
                                            "ip4-subnet": {
                                                "type": "string",
                                                "format": "ipv4",
                                                "description": "IPv4 network address or network address\/subnet mask bits."
                                            },
                                            "ip6-subnet": {
                                                "type": "string",
                                                "description": "IPv6 network address\/subnet mask bits."
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_clone_: Clone this specific resource.\nWhen *action=clone* is set, the extra parameters *nkey* must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "clone"
                        ]
                    },
                    {
                        "name": "nkey",
                        "in": "query",
                        "description": " If *action=clone*, use *nkey* to specify the ID for the new resource to be created.\nFor example, to clone `address1` to `address1_clone`, use:\n__action=clone&nkey=address1_clone__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.\n",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "emailfilter\/iptrust"
                ]
            }
        },
        "\/emailfilter\/mheader\/{id}": {
            "get": {
                "summary": "Select a specific entry from a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter mime header content.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Mime header entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "fieldname": {
                                                "type": "string",
                                                "description": "Pattern for header field name.",
                                                "maxLength": 63
                                            },
                                            "fieldbody": {
                                                "type": "string",
                                                "description": "Pattern for the header field body.",
                                                "maxLength": 127
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Mark spam or good.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "spam",
                                                    "clear"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for this object type.\nschema: Return the CLI schema for this object type.\nrevision: Return the CMDB revision for this object type.\ntransaction-list: List all configuration transaction(s).\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema",
                            "revision"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/mheader"
                ]
            },
            "put": {
                "summary": "Update this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter mime header content.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Mime header entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "fieldname": {
                                                "type": "string",
                                                "description": "Pattern for header field name.",
                                                "maxLength": 63
                                            },
                                            "fieldbody": {
                                                "type": "string",
                                                "description": "Pattern for the header field body.",
                                                "maxLength": 127
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Mark spam or good.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "spam",
                                                    "clear"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_move_: Move this specific resource.\nWhen *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "move"
                        ]
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.\nFor example, to move `object 1` to before `object 2`, use:\n__action=move&before=2__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.\nFor example, to move `object 1` to after `object 3`, use:\n__action=move&after=3__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/mheader"
                ]
            },
            "delete": {
                "summary": "Delete this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "mkey"
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/mheader"
                ]
            }
        },
        "\/emailfilter\/mheader": {
            "get": {
                "summary": "Select all entries in a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter mime header content.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Mime header entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "fieldname": {
                                                "type": "string",
                                                "description": "Pattern for header field name.",
                                                "maxLength": 63
                                            },
                                            "fieldbody": {
                                                "type": "string",
                                                "description": "Pattern for the header field body.",
                                                "maxLength": 127
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Mark spam or good.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "spam",
                                                    "clear"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Starting entry index."
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Maximum number of entries to return."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "with_contents_hash",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include a checksum of each object's contents."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering multiple key\/value pairs\nOperator     |   Description\n==     |   Case insensitive match with pattern.\n!=     |    Does not match with pattern (case insensitive).\n=@     |    Pattern found in object value (case insensitive).\n!@     |    \ufeffPattern not\ufeff found in object value (case insensitive).\n<=     |    Value must be less than or equal to \ufeffpattern\ufeff.\n<     |    Value must be less than pattern\ufeff.\n.>=    |    Value must be greater than or equal to \ufeffpattern\ufeff.\n.>     |    Value must be greater than \ufeffpattern\ufeff.\nLogical OR    |    Separate filters using commas ','\nLogical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.\nCombining AND and OR    |    You can combine AND and OR filters together to create more complex filters.\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this name."
                    },
                    {
                        "name": "pattern",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this value."
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Scope [global|vdom|both*]"
                    },
                    {
                        "name": "exclude-default-values",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Exclude properties\/objects with default value"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for entire CLI tree.\nmeta: Return meta data for a specific object, table, or the entire CLI tree.\nschema: Return schema for entire CLI tree.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/mheader"
                ]
            },
            "post": {
                "summary": "Create object(s) in this table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "id": {
                                    "type": "integer",
                                    "description": "ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of table.",
                                    "maxLength": 63
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Optional comments.",
                                    "maxLength": 255
                                },
                                "entries": {
                                    "description": "Spam filter mime header content.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "status": {
                                                "type": "string",
                                                "description": "Enable\/disable status.   \nenable:Enable status.   \ndisable:Disable status.",
                                                "enum": [
                                                    "enable",
                                                    "disable"
                                                ]
                                            },
                                            "id": {
                                                "type": "integer",
                                                "description": "Mime header entry ID.",
                                                "maximum": 4294967295,
                                                "minimum": 0
                                            },
                                            "fieldname": {
                                                "type": "string",
                                                "description": "Pattern for header field name.",
                                                "maxLength": 63
                                            },
                                            "fieldbody": {
                                                "type": "string",
                                                "description": "Pattern for the header field body.",
                                                "maxLength": 127
                                            },
                                            "pattern-type": {
                                                "type": "string",
                                                "description": "Wildcard pattern or regular expression.   \nwildcard:Wildcard pattern.   \nregexp:Perl regular expression.",
                                                "enum": [
                                                    "wildcard",
                                                    "regexp"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Mark spam or good.   \nspam:Mark as spam email.   \nclear:Mark as good email.",
                                                "enum": [
                                                    "spam",
                                                    "clear"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_clone_: Clone this specific resource.\nWhen *action=clone* is set, the extra parameters *nkey* must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "clone"
                        ]
                    },
                    {
                        "name": "nkey",
                        "in": "query",
                        "description": " If *action=clone*, use *nkey* to specify the ID for the new resource to be created.\nFor example, to clone `address1` to `address1_clone`, use:\n__action=clone&nkey=address1_clone__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.\n",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "emailfilter\/mheader"
                ]
            }
        },
        "\/emailfilter\/options": {
            "get": {
                "summary": "Select all entries in a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "dns-timeout": {
                                    "type": "integer",
                                    "description": "DNS query time out (1 - 30 sec).",
                                    "maximum": 30,
                                    "minimum": 1
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Starting entry index."
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Maximum number of entries to return."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "with_contents_hash",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include a checksum of each object's contents."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering multiple key\/value pairs\nOperator     |   Description\n==     |   Case insensitive match with pattern.\n!=     |    Does not match with pattern (case insensitive).\n=@     |    Pattern found in object value (case insensitive).\n!@     |    \ufeffPattern not\ufeff found in object value (case insensitive).\n<=     |    Value must be less than or equal to \ufeffpattern\ufeff.\n<     |    Value must be less than pattern\ufeff.\n.>=    |    Value must be greater than or equal to \ufeffpattern\ufeff.\n.>     |    Value must be greater than \ufeffpattern\ufeff.\nLogical OR    |    Separate filters using commas ','\nLogical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.\nCombining AND and OR    |    You can combine AND and OR filters together to create more complex filters.\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this name."
                    },
                    {
                        "name": "pattern",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this value."
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Scope [global|vdom|both*]"
                    },
                    {
                        "name": "exclude-default-values",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Exclude properties\/objects with default value"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for entire CLI tree.\nmeta: Return meta data for a specific object, table, or the entire CLI tree.\nschema: Return schema for entire CLI tree.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/options"
                ]
            },
            "put": {
                "summary": "Update this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "dns-timeout": {
                                    "type": "integer",
                                    "description": "DNS query time out (1 - 30 sec).",
                                    "maximum": 30,
                                    "minimum": 1
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_move_: Move this specific resource.\nWhen *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "move"
                        ]
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.\nFor example, to move `object 1` to before `object 2`, use:\n__action=move&before=2__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.\nFor example, to move `object 1` to after `object 3`, use:\n__action=move&after=3__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "emailfilter\/options"
                ]
            }
        },
        "\/emailfilter\/profile\/{name}": {
            "get": {
                "summary": "Select a specific entry from a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Profile name.",
                                    "maxLength": 35
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Comment.",
                                    "maxLength": 255
                                },
                                "feature-set": {
                                    "type": "string",
                                    "description": "Flow\/proxy feature set.   \nflow:Flow feature set.   \nproxy:Proxy feature set.",
                                    "enum": [
                                        "flow",
                                        "proxy"
                                    ]
                                },
                                "replacemsg-group": {
                                    "type": "string",
                                    "description": "Replacement message group.",
                                    "maxLength": 35
                                },
                                "spam-log": {
                                    "type": "string",
                                    "description": "Enable\/disable spam logging for email filtering.   \ndisable:Disable spam logging for email filtering.   \nenable:Enable spam logging for email filtering.",
                                    "enum": [
                                        "disable",
                                        "enable"
                                    ]
                                },
                                "spam-log-fortiguard-response": {
                                    "type": "string",
                                    "description": "Enable\/disable logging FortiGuard spam response.   \ndisable:Disable logging FortiGuard spam response.   \nenable:Enable logging FortiGuard spam response.",
                                    "enum": [
                                        "disable",
                                        "enable"
                                    ]
                                },
                                "spam-filtering": {
                                    "type": "string",
                                    "description": "Enable\/disable spam filtering.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                },
                                "external": {
                                    "type": "string",
                                    "description": "Enable\/disable external Email inspection.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                },
                                "options": {
                                    "type": "string",
                                    "description": "Options.   \nbannedword:Content block.   \nspambwl:Black\/white list.   \nspamfsip:Email IP address FortiGuard AntiSpam black list check.   \nspamfssubmit:Add FortiGuard AntiSpam spam submission text.   \nspamfschksum:Email checksum FortiGuard AntiSpam check.   \nspamfsurl:Email content URL FortiGuard AntiSpam check.   \nspamhelodns:Email helo\/ehlo domain DNS check.   \nspamraddrdns:Email return address DNS check.   \nspamrbl:Email DNSBL & ORBL check.   \nspamhdrcheck:Email mime header check.   \nspamfsphish:Email content phishing URL FortiGuard AntiSpam check.",
                                    "enum": [
                                        "bannedword",
                                        "spambwl",
                                        "spamfsip",
                                        "spamfssubmit",
                                        "spamfschksum",
                                        "spamfsurl",
                                        "spamhelodns",
                                        "spamraddrdns",
                                        "spamrbl",
                                        "spamhdrcheck",
                                        "spamfsphish"
                                    ]
                                },
                                "imap": {
                                    "description": "IMAP.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.",
                                                "enum": [
                                                    "pass",
                                                    "tag"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "pop3": {
                                    "description": "POP3.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.",
                                                "enum": [
                                                    "pass",
                                                    "tag"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "smtp": {
                                    "description": "SMTP.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.   \ndiscard:Discard (block) spam email.",
                                                "enum": [
                                                    "pass",
                                                    "tag",
                                                    "discard"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            },
                                            "hdrip": {
                                                "type": "string",
                                                "description": "Enable\/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.   \ndisable:Disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.   \nenable:Enable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "local-override": {
                                                "type": "string",
                                                "description": "Enable\/disable local filter to override SMTP remote check result.   \ndisable:Disable local filter to override SMTP remote check result.   \nenable:Enable local filter to override SMTP remote check result.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "mapi": {
                                    "description": "MAPI.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ndiscard:Discard (block) spam email.",
                                                "enum": [
                                                    "pass",
                                                    "discard"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "msn-hotmail": {
                                    "description": "MSN Hotmail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "yahoo-mail": {
                                    "description": "Yahoo! Mail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "gmail": {
                                    "description": "Gmail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "other-webmails": {
                                    "description": "Other supported webmails.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "spam-bword-threshold": {
                                    "type": "integer",
                                    "description": "Spam banned word threshold.",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                },
                                "spam-bword-table": {
                                    "type": "integer",
                                    "description": "Anti-spam banned word table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-bwl-table": {
                                    "type": "integer",
                                    "description": "Anti-spam black\/white list table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-mheader-table": {
                                    "type": "integer",
                                    "description": "Anti-spam MIME header table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-rbl-table": {
                                    "type": "integer",
                                    "description": "Anti-spam DNSBL table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-iptrust-table": {
                                    "type": "integer",
                                    "description": "Anti-spam IP trust table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for this object type.\nschema: Return the CLI schema for this object type.\nrevision: Return the CMDB revision for this object type.\ntransaction-list: List all configuration transaction(s).\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema",
                            "revision"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/profile"
                ]
            },
            "put": {
                "summary": "Update this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Profile name.",
                                    "maxLength": 35
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Comment.",
                                    "maxLength": 255
                                },
                                "feature-set": {
                                    "type": "string",
                                    "description": "Flow\/proxy feature set.   \nflow:Flow feature set.   \nproxy:Proxy feature set.",
                                    "enum": [
                                        "flow",
                                        "proxy"
                                    ]
                                },
                                "replacemsg-group": {
                                    "type": "string",
                                    "description": "Replacement message group.",
                                    "maxLength": 35
                                },
                                "spam-log": {
                                    "type": "string",
                                    "description": "Enable\/disable spam logging for email filtering.   \ndisable:Disable spam logging for email filtering.   \nenable:Enable spam logging for email filtering.",
                                    "enum": [
                                        "disable",
                                        "enable"
                                    ]
                                },
                                "spam-log-fortiguard-response": {
                                    "type": "string",
                                    "description": "Enable\/disable logging FortiGuard spam response.   \ndisable:Disable logging FortiGuard spam response.   \nenable:Enable logging FortiGuard spam response.",
                                    "enum": [
                                        "disable",
                                        "enable"
                                    ]
                                },
                                "spam-filtering": {
                                    "type": "string",
                                    "description": "Enable\/disable spam filtering.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                },
                                "external": {
                                    "type": "string",
                                    "description": "Enable\/disable external Email inspection.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                },
                                "options": {
                                    "type": "string",
                                    "description": "Options.   \nbannedword:Content block.   \nspambwl:Black\/white list.   \nspamfsip:Email IP address FortiGuard AntiSpam black list check.   \nspamfssubmit:Add FortiGuard AntiSpam spam submission text.   \nspamfschksum:Email checksum FortiGuard AntiSpam check.   \nspamfsurl:Email content URL FortiGuard AntiSpam check.   \nspamhelodns:Email helo\/ehlo domain DNS check.   \nspamraddrdns:Email return address DNS check.   \nspamrbl:Email DNSBL & ORBL check.   \nspamhdrcheck:Email mime header check.   \nspamfsphish:Email content phishing URL FortiGuard AntiSpam check.",
                                    "enum": [
                                        "bannedword",
                                        "spambwl",
                                        "spamfsip",
                                        "spamfssubmit",
                                        "spamfschksum",
                                        "spamfsurl",
                                        "spamhelodns",
                                        "spamraddrdns",
                                        "spamrbl",
                                        "spamhdrcheck",
                                        "spamfsphish"
                                    ]
                                },
                                "imap": {
                                    "description": "IMAP.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.",
                                                "enum": [
                                                    "pass",
                                                    "tag"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "pop3": {
                                    "description": "POP3.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.",
                                                "enum": [
                                                    "pass",
                                                    "tag"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "smtp": {
                                    "description": "SMTP.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.   \ndiscard:Discard (block) spam email.",
                                                "enum": [
                                                    "pass",
                                                    "tag",
                                                    "discard"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            },
                                            "hdrip": {
                                                "type": "string",
                                                "description": "Enable\/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.   \ndisable:Disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.   \nenable:Enable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "local-override": {
                                                "type": "string",
                                                "description": "Enable\/disable local filter to override SMTP remote check result.   \ndisable:Disable local filter to override SMTP remote check result.   \nenable:Enable local filter to override SMTP remote check result.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "mapi": {
                                    "description": "MAPI.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ndiscard:Discard (block) spam email.",
                                                "enum": [
                                                    "pass",
                                                    "discard"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "msn-hotmail": {
                                    "description": "MSN Hotmail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "yahoo-mail": {
                                    "description": "Yahoo! Mail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "gmail": {
                                    "description": "Gmail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "other-webmails": {
                                    "description": "Other supported webmails.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "spam-bword-threshold": {
                                    "type": "integer",
                                    "description": "Spam banned word threshold.",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                },
                                "spam-bword-table": {
                                    "type": "integer",
                                    "description": "Anti-spam banned word table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-bwl-table": {
                                    "type": "integer",
                                    "description": "Anti-spam black\/white list table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-mheader-table": {
                                    "type": "integer",
                                    "description": "Anti-spam MIME header table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-rbl-table": {
                                    "type": "integer",
                                    "description": "Anti-spam DNSBL table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-iptrust-table": {
                                    "type": "integer",
                                    "description": "Anti-spam IP trust table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_move_: Move this specific resource.\nWhen *action=move* is set, one of the extra parameters (*before*, *after*) must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "move"
                        ]
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "If *action=move*, use *before* to specify the ID of the resource that this resource will be moved before.\nFor example, to move `object 1` to before `object 2`, use:\n__action=move&before=2__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "If *action=move*, use *after* to specify the ID of the resource that this resource will be moved after.\nFor example, to move `object 1` to after `object 3`, use:\n__action=move&after=3__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *move*.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "mkey"
                    }
                ],
                "tags": [
                    "emailfilter\/profile"
                ]
            },
            "delete": {
                "summary": "Delete this specific resource.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "mkey"
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/profile"
                ]
            }
        },
        "\/emailfilter\/profile": {
            "get": {
                "summary": "Select all entries in a CLI table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful",
                        "schema": {
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Profile name.",
                                    "maxLength": 35
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Comment.",
                                    "maxLength": 255
                                },
                                "feature-set": {
                                    "type": "string",
                                    "description": "Flow\/proxy feature set.   \nflow:Flow feature set.   \nproxy:Proxy feature set.",
                                    "enum": [
                                        "flow",
                                        "proxy"
                                    ]
                                },
                                "replacemsg-group": {
                                    "type": "string",
                                    "description": "Replacement message group.",
                                    "maxLength": 35
                                },
                                "spam-log": {
                                    "type": "string",
                                    "description": "Enable\/disable spam logging for email filtering.   \ndisable:Disable spam logging for email filtering.   \nenable:Enable spam logging for email filtering.",
                                    "enum": [
                                        "disable",
                                        "enable"
                                    ]
                                },
                                "spam-log-fortiguard-response": {
                                    "type": "string",
                                    "description": "Enable\/disable logging FortiGuard spam response.   \ndisable:Disable logging FortiGuard spam response.   \nenable:Enable logging FortiGuard spam response.",
                                    "enum": [
                                        "disable",
                                        "enable"
                                    ]
                                },
                                "spam-filtering": {
                                    "type": "string",
                                    "description": "Enable\/disable spam filtering.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                },
                                "external": {
                                    "type": "string",
                                    "description": "Enable\/disable external Email inspection.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                },
                                "options": {
                                    "type": "string",
                                    "description": "Options.   \nbannedword:Content block.   \nspambwl:Black\/white list.   \nspamfsip:Email IP address FortiGuard AntiSpam black list check.   \nspamfssubmit:Add FortiGuard AntiSpam spam submission text.   \nspamfschksum:Email checksum FortiGuard AntiSpam check.   \nspamfsurl:Email content URL FortiGuard AntiSpam check.   \nspamhelodns:Email helo\/ehlo domain DNS check.   \nspamraddrdns:Email return address DNS check.   \nspamrbl:Email DNSBL & ORBL check.   \nspamhdrcheck:Email mime header check.   \nspamfsphish:Email content phishing URL FortiGuard AntiSpam check.",
                                    "enum": [
                                        "bannedword",
                                        "spambwl",
                                        "spamfsip",
                                        "spamfssubmit",
                                        "spamfschksum",
                                        "spamfsurl",
                                        "spamhelodns",
                                        "spamraddrdns",
                                        "spamrbl",
                                        "spamhdrcheck",
                                        "spamfsphish"
                                    ]
                                },
                                "imap": {
                                    "description": "IMAP.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.",
                                                "enum": [
                                                    "pass",
                                                    "tag"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "pop3": {
                                    "description": "POP3.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.",
                                                "enum": [
                                                    "pass",
                                                    "tag"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "smtp": {
                                    "description": "SMTP.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.   \ndiscard:Discard (block) spam email.",
                                                "enum": [
                                                    "pass",
                                                    "tag",
                                                    "discard"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            },
                                            "hdrip": {
                                                "type": "string",
                                                "description": "Enable\/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.   \ndisable:Disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.   \nenable:Enable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "local-override": {
                                                "type": "string",
                                                "description": "Enable\/disable local filter to override SMTP remote check result.   \ndisable:Disable local filter to override SMTP remote check result.   \nenable:Enable local filter to override SMTP remote check result.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "mapi": {
                                    "description": "MAPI.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ndiscard:Discard (block) spam email.",
                                                "enum": [
                                                    "pass",
                                                    "discard"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "msn-hotmail": {
                                    "description": "MSN Hotmail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "yahoo-mail": {
                                    "description": "Yahoo! Mail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "gmail": {
                                    "description": "Gmail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "other-webmails": {
                                    "description": "Other supported webmails.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "spam-bword-threshold": {
                                    "type": "integer",
                                    "description": "Spam banned word threshold.",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                },
                                "spam-bword-table": {
                                    "type": "integer",
                                    "description": "Anti-spam banned word table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-bwl-table": {
                                    "type": "integer",
                                    "description": "Anti-spam black\/white list table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-mheader-table": {
                                    "type": "integer",
                                    "description": "Anti-spam MIME header table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-rbl-table": {
                                    "type": "integer",
                                    "description": "Anti-spam DNSBL table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-iptrust-table": {
                                    "type": "integer",
                                    "description": "Anti-spam IP trust table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "datasource",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include datasource information for each linked object."
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Starting entry index."
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Maximum number of entries to return."
                    },
                    {
                        "name": "with_meta",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include meta information about each object (type id, references, etc)."
                    },
                    {
                        "name": "with_contents_hash",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to include a checksum of each object's contents."
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Enable to call CLI skip operator to hide skipped properties."
                    },
                    {
                        "name": "format",
                        "in": "query",
                        "description": "List of property names to include in results, separated by | (i.e. policyid|srcintf).",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "pipes",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filtering multiple key\/value pairs\nOperator     |   Description\n==     |   Case insensitive match with pattern.\n!=     |    Does not match with pattern (case insensitive).\n=@     |    Pattern found in object value (case insensitive).\n!@     |    \ufeffPattern not\ufeff found in object value (case insensitive).\n<=     |    Value must be less than or equal to \ufeffpattern\ufeff.\n<     |    Value must be less than pattern\ufeff.\n.>=    |    Value must be greater than or equal to \ufeffpattern\ufeff.\n.>     |    Value must be greater than \ufeffpattern\ufeff.\nLogical OR    |    Separate filters using commas ','\nLogical AND    |    Filter strings can be combined to create logical AND queries by including multiple filters in the request.\nCombining AND and OR    |    You can combine AND and OR filters together to create more complex filters.\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "multi",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this name."
                    },
                    {
                        "name": "pattern",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "If present, objects will be filtered on property with this value."
                    },
                    {
                        "name": "scope",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Scope [global|vdom|both*]"
                    },
                    {
                        "name": "exclude-default-values",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "Exclude properties\/objects with default value"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "default: Return the CLI default values for entire CLI tree.\nmeta: Return meta data for a specific object, table, or the entire CLI tree.\nschema: Return schema for entire CLI tree.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "default",
                            "schema"
                        ]
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "tags": [
                    "emailfilter\/profile"
                ]
            },
            "post": {
                "summary": "Create object(s) in this table.\n Access Group: utmgrp",
                "responses": {
                    "400": {
                        "description": "Bad Request: Request cannot be processed by the API"
                    },
                    "401": {
                        "description": "Not Authorized: Request without successful login session"
                    },
                    "403": {
                        "description": "Forbidden: Request is missing CSRF token or administrator is missing access profile permissions."
                    },
                    "404": {
                        "description": "Resource Not Found: Unable to find the specified resource."
                    },
                    "405": {
                        "description": "Method Not Allowed: Specified HTTP method is not allowed for this resource. "
                    },
                    "424": {
                        "description": "Failed Dependency: Fail dependency can be duplicate resource, missing required parameter, missing required attribute, invalid attribute value"
                    },
                    "200": {
                        "description": "OK: Request returns successful"
                    },
                    "500": {
                        "description": "Internal Server Error: Internal error when processing the request "
                    },
                    "413": {
                        "description": "Request Entity Too Large: Request cannot be processed due to large entity "
                    },
                    "429": {
                        "description": "Access temporarily blocked: Maximum failed authentications reached. The offended source is temporarily blocked for certain amount of time."
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Possible parameters to go in the body for the request",
                        "required": true,
                        "schema": {
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Profile name.",
                                    "maxLength": 35
                                },
                                "comment": {
                                    "type": "string",
                                    "description": "Comment.",
                                    "maxLength": 255
                                },
                                "feature-set": {
                                    "type": "string",
                                    "description": "Flow\/proxy feature set.   \nflow:Flow feature set.   \nproxy:Proxy feature set.",
                                    "enum": [
                                        "flow",
                                        "proxy"
                                    ]
                                },
                                "replacemsg-group": {
                                    "type": "string",
                                    "description": "Replacement message group.",
                                    "maxLength": 35
                                },
                                "spam-log": {
                                    "type": "string",
                                    "description": "Enable\/disable spam logging for email filtering.   \ndisable:Disable spam logging for email filtering.   \nenable:Enable spam logging for email filtering.",
                                    "enum": [
                                        "disable",
                                        "enable"
                                    ]
                                },
                                "spam-log-fortiguard-response": {
                                    "type": "string",
                                    "description": "Enable\/disable logging FortiGuard spam response.   \ndisable:Disable logging FortiGuard spam response.   \nenable:Enable logging FortiGuard spam response.",
                                    "enum": [
                                        "disable",
                                        "enable"
                                    ]
                                },
                                "spam-filtering": {
                                    "type": "string",
                                    "description": "Enable\/disable spam filtering.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                },
                                "external": {
                                    "type": "string",
                                    "description": "Enable\/disable external Email inspection.   \nenable:Enable setting.   \ndisable:Disable setting.",
                                    "enum": [
                                        "enable",
                                        "disable"
                                    ]
                                },
                                "options": {
                                    "type": "string",
                                    "description": "Options.   \nbannedword:Content block.   \nspambwl:Black\/white list.   \nspamfsip:Email IP address FortiGuard AntiSpam black list check.   \nspamfssubmit:Add FortiGuard AntiSpam spam submission text.   \nspamfschksum:Email checksum FortiGuard AntiSpam check.   \nspamfsurl:Email content URL FortiGuard AntiSpam check.   \nspamhelodns:Email helo\/ehlo domain DNS check.   \nspamraddrdns:Email return address DNS check.   \nspamrbl:Email DNSBL & ORBL check.   \nspamhdrcheck:Email mime header check.   \nspamfsphish:Email content phishing URL FortiGuard AntiSpam check.",
                                    "enum": [
                                        "bannedword",
                                        "spambwl",
                                        "spamfsip",
                                        "spamfssubmit",
                                        "spamfschksum",
                                        "spamfsurl",
                                        "spamhelodns",
                                        "spamraddrdns",
                                        "spamrbl",
                                        "spamhdrcheck",
                                        "spamfsphish"
                                    ]
                                },
                                "imap": {
                                    "description": "IMAP.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.",
                                                "enum": [
                                                    "pass",
                                                    "tag"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "pop3": {
                                    "description": "POP3.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.",
                                                "enum": [
                                                    "pass",
                                                    "tag"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "smtp": {
                                    "description": "SMTP.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ntag:Tag spam email with configured text in subject or header.   \ndiscard:Discard (block) spam email.",
                                                "enum": [
                                                    "pass",
                                                    "tag",
                                                    "discard"
                                                ]
                                            },
                                            "tag-type": {
                                                "type": "string",
                                                "description": "Tag subject or header for spam email.   \nsubject:Prepend text to spam email subject.   \nheader:Append a user defined mime header to spam email.   \nspaminfo:Append spam info to spam email header.",
                                                "enum": [
                                                    "subject",
                                                    "header",
                                                    "spaminfo"
                                                ]
                                            },
                                            "tag-msg": {
                                                "type": "string",
                                                "description": "Subject text or header added to spam email.",
                                                "maxLength": 63
                                            },
                                            "hdrip": {
                                                "type": "string",
                                                "description": "Enable\/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.   \ndisable:Disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.   \nenable:Enable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "local-override": {
                                                "type": "string",
                                                "description": "Enable\/disable local filter to override SMTP remote check result.   \ndisable:Disable local filter to override SMTP remote check result.   \nenable:Enable local filter to override SMTP remote check result.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "mapi": {
                                    "description": "MAPI.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            },
                                            "action": {
                                                "type": "string",
                                                "description": "Action for spam email.   \npass:Allow spam email to pass through.   \ndiscard:Discard (block) spam email.",
                                                "enum": [
                                                    "pass",
                                                    "discard"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "msn-hotmail": {
                                    "description": "MSN Hotmail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "yahoo-mail": {
                                    "description": "Yahoo! Mail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "gmail": {
                                    "description": "Gmail.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "other-webmails": {
                                    "description": "Other supported webmails.",
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "log-all": {
                                                "type": "string",
                                                "description": "Enable\/disable logging of all email traffic.   \ndisable:Disable logging of all email traffic.   \nenable:Enable logging of all email traffic.",
                                                "enum": [
                                                    "disable",
                                                    "enable"
                                                ]
                                            }
                                        }
                                    },
                                    "maxItems": null
                                },
                                "spam-bword-threshold": {
                                    "type": "integer",
                                    "description": "Spam banned word threshold.",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                },
                                "spam-bword-table": {
                                    "type": "integer",
                                    "description": "Anti-spam banned word table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-bwl-table": {
                                    "type": "integer",
                                    "description": "Anti-spam black\/white list table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-mheader-table": {
                                    "type": "integer",
                                    "description": "Anti-spam MIME header table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-rbl-table": {
                                    "type": "integer",
                                    "description": "Anti-spam DNSBL table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                },
                                "spam-iptrust-table": {
                                    "type": "integer",
                                    "description": "Anti-spam IP trust table ID.",
                                    "maximum": 4294967295,
                                    "minimum": 0
                                }
                            }
                        }
                    },
                    {
                        "name": "vdom",
                        "in": "query",
                        "description": "Specify the Virtual Domain(s) from which results are returned or changes are applied to. If this parameter is not provided, the management VDOM will be used. If the admin does not have access to the VDOM, a permission error will be returned.\nThe URL parameter is one of:\nvdom=root (Single VDOM)\nvdom=vdom1,vdom2 (Multiple VDOMs)\nvdom=* (All VDOMs)\n",
                        "required": false,
                        "type": "array",
                        "collectionFormat": "csv",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "description": "If supported, an action can be specified.\n_clone_: Clone this specific resource.\nWhen *action=clone* is set, the extra parameters *nkey* must be provided.\n__*Note:*__ If this parameter is provided when not supported, the action will be ignored and an \u201cinvalid request\u201d error will be returned.\n",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "clone"
                        ]
                    },
                    {
                        "name": "nkey",
                        "in": "query",
                        "description": " If *action=clone*, use *nkey* to specify the ID for the new resource to be created.\nFor example, to clone `address1` to `address1_clone`, use:\n__action=clone&nkey=address1_clone__\n__*Note:*__ This parameter can only be used when the *action* parameter is set to *clone*.\n",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "emailfilter\/profile"
                ]
            }
        }
    }
}